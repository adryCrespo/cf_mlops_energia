# Based on the work of Emily Gorcenski
# https://www.emilygorcenski.com/post/configuring-a-data-science-workbench

version: "3.8"

services:
  db_airflow:
    restart: always
    image: postgres:12.10
    
    env_file:
      - ./env_folder/airflow.env
    ports:
      - "${PG_PORT}:5432"
    networks:
      - backend
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DATABASE}
  
  db_mlflow:
    restart: always
    image: postgres:12
    
    ports:
      - "${DB_PORT}:${DB_DOCKER_PORT}"
    env_file:
      - ./env_folder/mlflow.env
    networks:
      - backend
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
    volumes:
      - db_data:/var/lib/postgresql/data/
  
  s3:
    platform: linux/x86_64 # Remove this line if you are not using Docker Desktop on Apple Silicon
    image: minio/minio:RELEASE.2024-06-29T01-20-47Z.fips
    volumes:
      - minio_data:/data
    
    env_file:
      - ./env_folder/mlflow.env
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_UI_PORT}:9001" 
    networks:
      - frontend
      - backend
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  create_buckets:
    platform: linux/x86_64 # Remove this line if you are not using Docker Desktop on Apple Silicon
    image: minio/mc:RELEASE.2024-06-24T19-40-33Z.fips
    depends_on:
      - s3
    networks:
      - backend
    
    env_file:
      - ./env_folder/mlflow.env
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      /usr/bin/mc config host add s3 http://s3:${MINIO_PORT} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} --api S3v4;
      /usr/bin/mc mb --ignore-existing s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc anonymous set download s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc anonymous set upload s3/${MLFLOW_BUCKET_NAME};
      /usr/bin/mc anonymous set public s3/${MLFLOW_BUCKET_NAME};
      exit 0;
      '

      
  tracking_server:
    depends_on:
      - db_mlflow
    restart: always
    image: bitnami/mlflow:2.14.1
    ports:
      - "${MLFLOW_PORT}:5000"
    networks:
      - frontend
      - backend
    env_file:
      - ./env_folder/mlflow.env
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}		
      - MLFLOW_S3_ENDPOINT_URL=http://s3:${MINIO_PORT}
    entrypoint: >
      /bin/sh -c '
      sleep 5;
      echo postgresql://${DB_USER}:${DB_PASSWORD}@db_mlflow:${DB_DOCKER_PORT}/${DB_DATABASE}; 
      mlflow server \
        --backend-store-uri postgresql://${DB_USER}:${DB_PASSWORD}@db_mlflow:${DB_DOCKER_PORT}/${DB_DATABASE} \
        --host 0.0.0.0 \
        --port 5000 \
        --artifacts-destination s3://mlflow/;
      '
  airflow-init:
        build:
            context: .
            dockerfile: Dockerfile
            
        entrypoint: ./scripts/airflow-entrypoint.sh
        user: "${AIRFLOW_UID:-50000}:0"
          
        env_file:
         - ./env_folder/airflow.env 
        networks:
         - backend
        depends_on:
            db_airflow:
                condition: service_started
            db_mlflow:
                condition: service_started
            create_buckets:    
                condition: service_started

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    command: scheduler
    restart: on-failure
    depends_on:
      db_airflow:
        condition: service_started
      airflow-init:
        condition: service_started
    env_file:
      - ./env_folder/airflow.env 
    ports:
      - "8794:8793"
    networks:
      - backend
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow-logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 2

  webserver:
    hostname: webserver
    build:
      context: .
      dockerfile: Dockerfile
    command: webserver
    restart: always
    depends_on:
      db_airflow:
        condition: service_started
      airflow-init:
        condition: service_started
    env_file:
      - ./env_folder/airflow.env 
    volumes:
      - ./dags:/opt/airflow/dags
      - ./airflow-logs:/opt/airflow/logs
      - ./scripts:/opt/airflow/scripts
      - ./data:/opt/airflow/data
    ports:
      - "8080:8080"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "[ -f /usr/local/airflow/airflow-webserver.pid ]"]
      interval: 30s
      timeout: 30s
      retries: 2


volumes:
  db_data:
  minio_data:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge